"""empty message

Revision ID: f77a6179745b
Revises: 
Create Date: 2024-06-19 17:22:29.367071

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'f77a6179745b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('weather_main',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('wind_degree', sa.Integer(), nullable=True),
    sa.Column('wind_direction', sa.String(), nullable=True),
    sa.Column('last_updated', sa.Date(), nullable=True),
    sa.Column('sunrise', sa.Time(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('precipitation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('weather_main_id', sa.Integer(), nullable=True),
    sa.Column('precip_mm', sa.Float(), nullable=True),
    sa.Column('wind_kph', sa.Float(), nullable=True),
    sa.Column('precip_in', sa.Float(), nullable=True),
    sa.Column('humidity', sa.Integer(), nullable=True),
    sa.Column('cloud', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['weather_main_id'], ['weather_main.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    op.add_column('precipitation', sa.Column('go_outside', sa.Boolean()))

    # Data migration step
    weather_main_cols = ['id', 'country', 'wind_degree', 'wind_direction', 'last_updated', 'sunrise']
    precipitation_cols = ['weather_main_id', 'precip_mm', 'precip_in', 'humidity', 'cloud','wind_kph']

    op.execute(f"""
        INSERT INTO weather_main ({', '.join(weather_main_cols)})
        SELECT {', '.join(weather_main_cols)}
        FROM weather
    """)

    op.execute(f"""
        INSERT INTO precipitation ({', '.join(precipitation_cols)})
        SELECT id, precip_mm, precip_in, humidity, cloud, wind_kph
        FROM weather
    """)


    op.execute("""
        UPDATE precipitation
        SET go_outside = CASE WHEN wind_kph > 10 THEN false ELSE true END
    """)

    op.drop_table('weather')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('weather',
    sa.Column('id', postgresql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('country', postgresql.VARCHAR(), nullable=True),
    sa.Column('wind_degree', postgresql.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('wind_kph', postgresql.FLOAT(), nullable=True),
    sa.Column('wind_direction', postgresql.VARCHAR(), nullable=True),
    sa.Column('last_updated', postgresql.DATE(), nullable=True),
    sa.Column('sunrise', postgresql.TIME(), nullable=True),
    sa.Column('precip_mm', postgresql.FLOAT(), nullable=True),
    sa.Column('precip_in', postgresql.FLOAT(), nullable=True),
    sa.Column('humidity', postgresql.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cloud', postgresql.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # Data migration step
    weather_cols = ['id', 'country', 'wind_degree', 'wind_direction', 'last_updated', 'sunrise']
    precipitation_cols = ['weather_main_id', 'precip_mm', 'precip_in', 'humidity', 'cloud','wind_kph']

    op.execute(f"""
           INSERT INTO weather ({', '.join(weather_cols + precipitation_cols[1:])})
           SELECT weather_main.id, weather_main.country, weather_main.wind_degree, weather_main.wind_direction, weather_main.last_updated, weather_main.sunrise,
                  precipitation.precip_mm, precipitation.precip_in, precipitation.humidity, precipitation.cloud, precipitation.wind_kph
           FROM weather_main
           JOIN precipitation ON weather_main.id = precipitation.weather_main_id
       """)


    op.drop_table('precipitation')
    op.drop_table('weather_main')
    # ### end Alembic commands ###
